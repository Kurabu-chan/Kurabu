name: "Publish on push"

on:
  push:
    branches: [main]

jobs:
  check-build:
    name: Check build required
    runs-on: ubuntu-latest
    outputs:
      build_required_check: ${{ steps.check-full-turbo.outputs.build_required_check }}
    steps:  
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.after }}
          fetch-depth: 0
      
      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Remove yarnrc
        run: rm ./.yarnrc || rm ./.yarnrc.yml || yarn --version

      - name: Add turbo globally
        run: yarn global add turbo        

      - name: Check if build is required
        env:
          REF: ${{ github.event.before }}
        run: |
          turbo run check-build-required --filter=^@kurabu/api[$REF] 2>&1 | tee ./check-build-required.txt

      - name: Output whether a build is required or not
        id: check-full-turbo
        run: |
          if grep -E -i -w -q "[1-9][0-9]* successful" ./check-build-required.txt; then
            echo "::set-output name=build_required_check::required"
            echo "fullturbo"
          else
            echo "::set-output name=build_required_check::notrequired"
            echo "nofullturbo"
          fi

      - name: Display output
        run: echo "${{ toJson(steps.check-full-turbo.outputs) }}"

  build-docker:
    name: Build docker image
    runs-on: ubuntu-latest
    needs: check-build
    if: ${{ needs.check-build.outputs.build_required_check == 'required' }}
    steps:
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: amd64,arm64/v8,arm64
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Remove yarnrc
        run: rm ./.yarnrc || rm ./.yarnrc.yml || yarn --version

      - name: Globally insall packages
        run: yarn global add turbo ts-node   
      - name: Install script dependencies
        run: cd apps/api/scripts && npm install && cd ../../..
        
      - name: Build and push docker image
        run: yarn run build:docker --filter=@kurabu/api

  publish-stage:
    name: Publish to staging
    runs-on: ubuntu-latest
    needs: build-docker
    environment: 
      name: Staging
      url: 'https://stage.kurabu.moe'
    steps:
      - name: Start rollout
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.K8S_HOST }}
          username: ${{ secrets.K8S_USER }}
          key: ${{ secrets.K8S_SSH }}
          script: kubectl rollout restart deployments api-deployment -n=${{ secrets.NAMESPACE }}

  publish-prod:
    name: Publish to production
    runs-on: ubuntu-latest
    needs: build-docker
    environment: 
      name: Production
      url: 'https://prod.kurabu.moe'
    steps:
      - uses: imjasonh/setup-crane@v0.1
      - name: Retag image
        env:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          crane auth login -u $username -p $password docker.io
          crane tag docker.io/rafaeltab/kurabu.api:latest prod
      - name: Start rollout
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.K8S_HOST }}
          username: ${{ secrets.K8S_USER }}
          key: ${{ secrets.K8S_SSH }}
          script: kubectl rollout restart deployments api-deployment -n=${{ secrets.NAMESPACE }}
